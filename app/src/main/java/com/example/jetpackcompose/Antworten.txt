A) Welche Vorteile bieten Coroutinen in der AndroidEntwicklung und wie tragen sie dazu bei, asynchrone  Aufgaben effizienter und benutzerfreundlicher zu
gestalten?
 - Effiziente Nutzung von Ressourcen: Coroutinen ermöglichen eine Ausführung von asynchronen Aufgaben,
                                      ohne dass der Hauptthread blockiert wird. Dies führt zu einer
                                      Vermeidung von UI-Blockaden und verbessert die Benutzererfahrung
 - Ressourcenverwaltung: Coroutinen können bei Bedarf pausiert und später fortgesetzt werden,
                         was Ressourcen spart und die Leistung optimiert
 - Einfachheit: Der Code liest sich wie sequenzieller Code, was die Wartbarkeit und Lesbarkeit verbessert


B) Erkläre warum du dich für einen bestimmten Dispatcher in Aufgabe 2A)
entschieden hast.
Vewendeter Dispatcher: Dispatchers.IO
Begründung: Dispatchers.IO wurde speziell für E/A-intensive Tätigkeiten wie Netzwerkoperationen entworfen.
            In der AUfgabe 2a habe ich die fetchForecast-Methode angewendet, welche externe APIS nutzt.
            DUrch die Verwendung von DIspatchers.IO wird der Hauptthread entlastet, da dieser Vorgang
            in einem separaten Threadpool mit IO-Optimierung durchgeführt wird.

C) Nenne zwei praxisrelevante Anwendungsfälle, bei denen der Einsatz von
Services sinnvoll ist. Erkläre kurz warum.
Navigations-Apps: Ein Foreground Service wird genutzt, um kontinuierlich den Standort des Benutzers
                  zu verfolgen und Echtzeit-Navigation anzubieten.
                  Da der Service aktiv bleibt, auch wenn die App minimiert ist und informiert den
                  Benutzer durch eine Benachrichtigung über laufende Navigationsanweisung

Musikplayer-Apps (wie Spotify): Hier wird ein Bound Service verwendet, welches die Steuerung der
                                Musikwiedergabe aus verschiedenen UI-Komponenten
                                ( wie einem Player-Fragment oder einer Benachrichtigung) ermöglicht.
                                Dieser Service bietet eine konsistente Schnittstelle für die
                                Wiedergabesteuerung, unabhängig davon, welche UI-Komponente gerade aktiv ist.


D) Welche Vorteile bietet die Kombination von Services und Coroutinen? Kannst du
ein Beispiel aus dem Code der Wetter-App nennen, in dem beide miteinander
kombiniert genutzt werden?
 - Bessere Fehlerbehandlung: Strukturierte Concurrency mit CoroutineScope bietet
                             Kontrollfluss und Transparenz
 - Effizienz: Coroutinen ermöglichen es, Services so zu gestalten, dass sie Hintergrundarbeiten ohne
              Blockierung des Hauptthreads ausführen können
 - Ressourcenschonung: Coroutinen können pausiert und später wiederaufgenommen werden, was den
                       Ressourcenverbrauch minimiert und parallele Aufgaben effizienter macht
Beispiel: Im PopupService wird eine Coroutine mit Dispatchers.IO verwendet, um Einstellungen asynchron zu laden.
          Hier sorgt die Kombination aus CoroutineScope und Dispatchers.IO dafür, dass das Laden der
          Einstellungen und die Timer-Initialisierung im Hintergrund erfolgen, ohne die Haupt-UI zu blockieren.